TODO PROMPTS:

it seems like there are a few redundancies or cases where the same information is stored in two 
  different places. for example, in the event modal, the 'capacity' is inconsistent with the class roster
   view, which has the accurate capactiy. please thoroughly review the code and search for such 
  inconsistencies and bloat. create a plan to simplify the codebase; you can split large files into 
  sub-components if it improves readability, but do not do so superfluously 
  

Claude plan before 5-hour limit:
Code Simplification and Redundancy Elimination Plan                                                 │ │
│ │                                                                                                     │ │
│ │ 🔍 Major Issues Identified                                                                          │ │
│ │                                                                                                     │ │
│ │ 1. Event Capacity Inconsistency (Your Reported Issue)                                               │ │
│ │                                                                                                     │ │
│ │ - Problem: Event capacity is stored in two places creating inconsistency:                           │ │
│ │   - event.currentBookings (stored in Event object, updated manually)                                │ │
│ │   - Actual confirmed bookings count (calculated from EventBooking records)                          │ │
│ │ - Files Affected: EventForm.tsx:102, EventRoster.tsx:160, EventDetails.tsx, EventCard.tsx:44        │ │
│ │ - Solution: Remove currentBookings field, calculate from EventBooking records dynamically           │ │
│ │                                                                                                     │ │
│ │ 2. Massive Dashboard Component (1,252 lines)                                                        │ │
│ │                                                                                                     │ │
│ │ - Problem: Dashboard.tsx is a monolithic component handling too many responsibilities               │ │
│ │ - Current Issues:                                                                                   │ │
│ │   - 15+ useState hooks, 5+ useMemo hooks                                                            │ │
│ │   - Handles all CRUD operations for customers, pieces, events                                       │ │
│ │   - Contains all modal state management                                                             │ │
│ │   - Mixed concerns: UI logic + business logic + state management                                    │ │
│ │ - Solution: Split into specialized sub-components and hooks                                         │ │
│ │                                                                                                     │ │
│ │ 3. Duplicate Status/Color Definitions                                                               │ │
│ │                                                                                                     │ │
│ │ - Problem: Status colors and definitions scattered across multiple files:                           │ │
│ │   - PieceCard.tsx has statusColors (lines 21-28) + pieceStatuses (lines 30-37)                      │ │
│ │   - EventCard.tsx has duplicate statusColors (lines 26-31)                                          │ │
│ │   - EventDetails.tsx has duplicate statusColors (47-53) + pieceStatuses (60-67)                     │ │
│ │   - Constants file exists but isn't consistently used                                               │ │
│ │ - Solution: Consolidate all status definitions in constants, remove duplicates                      │ │
│ │                                                                                                     │ │
│ │ 4. Redundant Glaze Calculation Logic                                                                │ │
│ │                                                                                                     │ │
│ │ - Problem: Glaze cost calculation scattered across 6 files:                                         │ │
│ │   - Dashboard.tsx:537, PieceForm.tsx:71, PieceEditModal.tsx:38, PieceFormModal.tsx:53,              │ │
│ │ database.ts:239                                                                                     │ │
│ │   - Inconsistent rounding and error handling                                                        │ │
│ │ - Solution: Create single utility function for glaze calculations                                   │ │
│ │                                                                                                     │ │
│ │ 5. Bulk Selection Logic Duplication                                                                 │ │
│ │                                                                                                     │ │
│ │ - Problem: Two different bulk selection implementations:                                            │ │
│ │   - EventRoster.tsx: Custom selection logic (lines 54-93)                                           │ │
│ │   - Dashboard.tsx: Uses useBulkSelection hook                                                       │ │
│ │ - Solution: Standardize on useBulkSelection hook everywhere                                         │ │
│ │                                                                                                     │ │
│ │ 6. Complex Form Components (688 lines CustomerBookingForm)                                          │ │
│ │                                                                                                     │ │
│ │ - Problem: CustomerBookingForm.tsx is oversized with mixed responsibilities:                        │ │
│ │   - Customer selection + pagination + bulk operations + new customer creation                       │ │
│ │ - Solution: Break into smaller, focused components                                                  │ │
│ │                                                                                                     │ │
│ │ 🎯 Implementation Plan                                                                              │ │
│ │                                                                                                     │ │
│ │ Phase 1: Critical Data Consistency Fixes                                                            │ │
│ │                                                                                                     │ │
│ │ 1. Remove Event.currentBookings field completely                                                    │ │
│ │   - Update types/index.ts to remove currentBookings                                                 │ │
│ │   - Update all components to calculate bookings dynamically                                         │ │
│ │   - Fix EventForm, EventRoster, EventDetails, EventCard                                             │ │
│ │ 2. Centralize status definitions                                                                    │ │
│ │   - Move all status colors to constants/index.ts                                                    │ │
│ │   - Remove duplicate statusColors from PieceCard, EventCard, EventDetails                           │ │
│ │   - Update all components to use centralized constants                                              │ │
│ │                                                                                                     │ │
│ │ Phase 2: Dashboard Component Refactoring                                                            │ │
│ │                                                                                                     │ │
│ │ 3. Extract Dashboard sub-components:                                                                │ │
│ │   - DashboardHeader (navigation + stats)                                                            │ │
│ │   - PiecesView (sorting nav + bulk actions + grouped pieces)                                        │ │
│ │   - CustomersView (customer grid + CSV import)                                                      │ │
│ │   - EventsView (event grid + filtering)                                                             │ │
│ │   - OverviewView (ready-for-pickup + recent customers)                                              │ │
│ │ 4. Extract custom hooks:                                                                            │ │
│ │   - useDashboardModals (all modal state management)                                                 │ │
│ │   - useDashboardFilters (search + filter logic)                                                     │ │
│ │   - usePieceOperations (piece CRUD + bulk operations)                                               │ │
│ │                                                                                                     │ │
│ │ Phase 3: Utility Consolidation                                                                      │ │
│ │                                                                                                     │ │
│ │ 5. Create centralized utilities:                                                                    │ │
│ │   - glazeCalculations.ts - single source for glaze cost logic                                       │ │
│ │   - capacityUtils.ts - event capacity calculations                                                  │ │
│ │   - statusUtils.ts - status formatting and validation                                               │ │
│ │ 6. Standardize bulk selection:                                                                      │ │
│ │   - Update EventRoster to use useBulkSelection hook                                                 │ │
│ │   - Remove custom selection logic                                                                   │ │
│ │                                                                                                     │ │
│ │ Phase 4: Form Component Simplification                                                              │ │
│ │                                                                                                     │ │
│ │ 7. Break down CustomerBookingForm:                                                                  │ │
│ │   - CustomerSelector (search + filter + pagination)                                                 │ │
│ │   - CustomerBookingActions (bulk book/remove operations)                                            │ │
│ │   - NewCustomerForm (customer creation modal)                                                       │ │
│ │ 8. Consolidate piece forms:                                                                         │ │
│ │   - Merge PieceForm/PieceFormModal/PieceEditModal common logic                                      │ │
│ │   - Create shared usePieceForm hook                                                                 │ │
│ │                                                                                                     │ │
│ │ Phase 5: Cleanup and Optimization                                                                   │ │
│ │                                                                                                     │ │
│ │ 9. Remove unused code:                                                                              │ │
│ │   - Clean up unused imports (identified in ESLint warnings)                                         │ │
│ │   - Remove commented-out code blocks                                                                │ │
│ │   - Consolidate duplicate utility functions                                                         │ │
│ │ 10. Performance optimizations:                                                                      │ │
│ │   - Memoize expensive calculations                                                                  │ │
│ │   - Optimize re-renders with proper dependencies                                                    │ │
│ │   - Reduce prop drilling with context where appropriate                                             │ │
│ │                                                                                                     │ │
│ │ 📊 Expected Outcomes                                                                                │ │
│ │                                                                                                     │ │
│ │ - Dashboard.tsx: 1,252 → ~400 lines (68% reduction)                                                 │ │
│ │ - CustomerBookingForm.tsx: 688 → ~300 lines (56% reduction)                                         │ │
│ │ - Eliminate 6 redundant status definition locations                                                 │ │
│ │ - Fix critical event capacity data inconsistency                                                    │ │
│ │ - Centralize business logic in reusable utilities                                                   │ │
│ │ - Improve maintainability and testing                                                               │ │
│ │                                                                                                     │ │
│ │ 🚨 Risk Mitigation                                                                                  │ │
│ │                                                                                                     │ │
│ │ - Each phase can be implemented incrementally                                                       │ │
│ │ - Maintain existing functionality throughout refactor                                               │ │
│ │ - Add component tests to prevent regressions                                                        │ │
│ │ - Keep git commits small and focused for easy rollback 







simplify codebase and improve readability, do not add bloat or redundancies

Codebase Simplification Plan                                                                        │ │
│ │                                                                                                     │ │
│ │ 🎯 Core Issues to Fix                                                                               │ │
│ │                                                                                                     │ │
│ │ 1. Event Capacity Inconsistency (Critical)                                                          │ │
│ │                                                                                                     │ │
│ │ - Problem: event.currentBookings vs actual booking count mismatch                                   │ │
│ │ - Fix: Remove currentBookings field, calculate from bookings array                                  │ │
│ │ - Files: EventForm.tsx, EventRoster.tsx, EventDetails.tsx, types/index.ts                           │ │
│ │                                                                                                     │ │
│ │ 2. Duplicate Status Definitions                                                                     │ │
│ │                                                                                                     │ │
│ │ - Problem: statusColors + pieceStatuses duplicated in 4 files                                       │ │
│ │ - Fix: Use existing constants/index.ts everywhere, delete duplicates                                │ │
│ │ - Files: PieceCard.tsx, EventCard.tsx, EventDetails.tsx                                             │ │
│ │                                                                                                     │ │
│ │ 3. Scattered Glaze Calculations                                                                     │ │
│ │                                                                                                     │ │
│ │ - Problem: Same calculation logic in 6 different places                                             │ │
│ │ - Fix: Single utility function, remove duplicates                                                   │ │
│ │ - Files: Dashboard.tsx, PieceForm.tsx, PieceEditModal.tsx, PieceFormModal.tsx                       │ │
│ │                                                                                                     │ │
│ │ 4. Oversized Dashboard (1,252 lines)                                                                │ │
│ │                                                                                                     │ │
│ │ - Problem: Too many responsibilities in one component                                               │ │
│ │ - Fix: Extract 3-4 focused sub-components:                                                          │ │
│ │   - PiecesViewSection (sorting + bulk actions + grid)                                               │ │
│ │   - CustomersViewSection (customer grid)                                                            │ │
│ │   - EventsViewSection (event grid)                                                                  │ │
│ │   - OverviewSection (stats + ready pieces)                                                          │ │
│ │                                                                                                     │ │
│ │ 5. Redundant Bulk Selection                                                                         │ │
│ │                                                                                                     │ │
│ │ - Problem: EventRoster has custom logic, Dashboard uses hook                                        │ │
│ │ - Fix: Use useBulkSelection everywhere, remove custom code                                          │ │
│ │                                                                                                     │ │
│ │ ✅ What NOT to do                                                                                    │ │
│ │                                                                                                     │ │
│ │ - No new abstraction layers                                                                         │ │
│ │ - No new utility classes                                                                            │ │
│ │ - No complex state management patterns                                                              │ │
│ │ - No breaking API changes                                                                           │ │
│ │                                                                                                     │ │
│ │ 📋 Simple Implementation Steps                                                                      │ │
│ │                                                                                                     │ │
│ │ 1. Fix event capacity calculation (remove field, use count)                                         │ │
│ │ 2. Delete duplicate status definitions, use constants                                               │ │
│ │ 3. Consolidate glaze calculation to one function                                                    │ │
│ │ 4. Split Dashboard into 4 focused components                                                        │ │
│ │ 5. Replace EventRoster custom selection with hook                                                   │ │
│ │ 6. Remove unused imports and dead code                                                              │ │
│ │                                                                                                     │ │
│ │ Result: Cleaner, more maintainable code with same functionality      



that sounds like a great plan, but i need to wait for your 5 hour limit to reset. please write a 
  summary of the plan and a prompt that i can use to instruct you at a future date, including necessary 
  context and guidelines

● Codebase Simplification Plan Summary & Future Prompt

  Key Issues Found:

  1. Event Capacity Inconsistency: event.currentBookings field conflicts with actual booking count
  calculations
  2. Duplicate Status Definitions: Status colors/arrays duplicated in 4+ files instead of using
  constants
  3. Scattered Glaze Calculations: Same calculation logic repeated in 6 different files
  4. Oversized Dashboard: 1,252-line component with too many responsibilities
  5. Redundant Bulk Selection: Custom logic in EventRoster vs useBulkSelection hook elsewhere

  Solution Approach:

  - Fix data inconsistencies first (remove currentBookings field)
  - Consolidate duplicate definitions to existing constants file
  - Create single glaze calculation utility
  - Split Dashboard into focused sub-components
  - Standardize on useBulkSelection hook
  - Remove unused code and imports

  ---
  Future Prompt to Use:

  Please implement the codebase simplification plan we discussed for the Clay Cafe pottery studio
  management app. The key goals are:

  1. **Fix Event Capacity Bug**: Remove the `currentBookings` field from Event type and all related        
  code. Calculate capacity from actual EventBooking records instead. This fixes the inconsistency
  between event modal and class roster capacity displays.

  2. **Eliminate Status Duplicates**: Remove duplicate `statusColors` and `pieceStatuses` definitions      
  from PieceCard.tsx, EventCard.tsx, and EventDetails.tsx. Use the existing constants/index.ts file        
  everywhere instead.

  3. **Consolidate Glaze Calculations**: Create a single utility function for glaze cost calculations      
  (cubicInches * glazeRatePerCubicInch) to replace the 6 different implementations scattered across        
  Dashboard.tsx, PieceForm.tsx, PieceEditModal.tsx, etc.

  4. **Split Oversized Dashboard**: The 1,252-line Dashboard.tsx component needs to be broken into 3-4     
  focused sub-components like PiecesViewSection, CustomersViewSection, EventsViewSection, and
  OverviewSection. Keep the same functionality but improve organization.

  5. **Standardize Bulk Selection**: Replace EventRoster's custom selection logic with the existing        
  useBulkSelection hook for consistency.

  6. **Clean Up**: Remove unused imports flagged by ESLint and any dead code.

  **Important Guidelines:**
  - Do NOT add new abstraction layers or complex patterns
  - Keep all existing functionality exactly the same
  - Focus on simplification and removing redundancy
  - Make incremental changes that can be easily tested
  - Prioritize the event capacity fix as it's a data consistency bug

  The codebase is a React TypeScript app with components in src/components/, types in src/types/, and      
  utilities in src/utils/ and src/constants/. Start with the most critical fixes first.

  This prompt gives you the context and specific direction needed to continue the simplification work      
  when your limits reset.